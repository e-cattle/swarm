version: '3.8'
services:
  cloud-api:
    image: ecattle/cloud-api:latest
    command: ["sh", "-c", "npm i & npm run start"]
    environment:
      - NODE_ENV=${NODE_ENV}
      - DOCKER_NODE_PORT=${NODE_PORT}
      - DOCKER_MONGO_PORT=${MONGO_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_FROM=${SMTP_FROM}
      - DOCKER_EMAIL=${DOCKER_EMAIL}

    ports:
      - "${CLOUD_API_PORT}:8080"
    networks:
      - manager_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == manager]

  portal-web:
    image: ecattle/portal-web:latest
    command: ["sh", "-c", "npm i & npm run serve"]
    environment:
      - VUE_APP_CLOUD=${VUE_APP_CLOUD}
    ports:
      - "${WEB_PORT}:8080"
    networks:
      - manager_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == manager]

  gestor-inquilino:
    image: ecattle/gestor-inquilino:latest
    command: ["sh", "-c", "npm i & npm run serve"]
    environment:
      - VUE_APP_CLOUD=${VUE_APP_CLOUD}
    ports:
      - "${MANAGER_PORT}:8080"
    networks:
      - manager_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == manager]
  database:
      image: mongo
      ports:
        - "${MONGO_PORT}:27017"
      networks:
        - manager_network
      deploy:
        mode: replicated
        replicas: 2
        placement:
          constraints: [node.role == manager]
  mail:
      image: mailhog/mailhog
      user: root
      ports:
        - "${DOCKER_EMAIL}:8025"
      networks:
        - manager_network
      deploy:
        mode: replicated
        replicas: 2
        placement:
          constraints: [node.role == manager]

networks:
  manager_network:
    driver: overlay # swarm requer driver overlay
    attachable: true # containers fora do swarm podem se conectar aos servi√ßos
