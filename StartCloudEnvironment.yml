version: '3.8'
services:
  cloud-api:
    image: ecattle/cloud-api:latest
    hostname: cloud-api
    command: ["sh", "-c", "npm i & npm run start"]
    environment:
      - NODE_ENV=${NODE_ENV}
      - DOCKER_NODE_PORT=${NODE_PORT}
      - DOCKER_MONGO_PORT=${MONGO_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_FROM=${SMTP_FROM}
      - DOCKER_EMAIL=${DOCKER_EMAIL}

    ports:
      - "${NODE_PORT}:3000"
    networks:
      - swarm_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == manager]

  portal-web:
    image: ecattle/portal-web:latest
    environment:
      - VUE_APP_CLOUD=${VUE_APP_CLOUD}
    ports:
      - "${WEB_PORT}:8080"
    networks:
      - swarm_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == manager]

  gestor-inquilino:
    image: ecattle/gestor-inquilino:latest
    environment:
      - VUE_APP_CLOUD=${VUE_APP_CLOUD}
    ports:
      - "${MANAGER_PORT}:8080"
    networks:
      - swarm_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == manager]
  database:
      image: mongo
      ports:
        - "${MONGO_PORT}:27017"
      networks:
        - swarm_network
      deploy:
        mode: replicated
        replicas: 1
        placement:
          constraints: [node.role == manager]
  mail:
      image: mailhog/mailhog
      user: root
      ports:
        - "${DOCKER_EMAIL}:8025"
      networks:
        - swarm_network
      deploy:
        mode: replicated
        replicas: 2
        placement:
          constraints: [node.role == manager]
  scheduler:
    image: ecattle/node-scheduler:latest
    environment:
      - URL_MONGO=database
      - URL_API_PORTAINER=cloud-api
      - TOKEN_API_PORTAINER=${TOKEN_API_PORTAINER}
      - SWARM_ID=${SWARM_ID}
    command: ["sh", "-c", "npm i & npm run start"]
    volumes:
      - farms_data:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - swarm_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
  agendash:
    image: agenda/agendash
    environment:
      - MONGODB_URI=mongodb://database
      - COLLECTION=schedulerJob
    ports:
      - "2999:3000"
    networks:
      - swarm_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  

networks:
  swarm_network:
    external: true

volumes:
  farms_data:
